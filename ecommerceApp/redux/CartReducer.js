import {createSlice} from "@reduxjs/toolkit"

// Creating a slice named 'cart' using createSlice method
export const CartSlice=createSlice({
    name:"cart", // Setting the name of the slice to 'cart'
    initialState:{
        cart:[], // Initializing the cart array in the initial state
    },
    reducers:{
        addToCart:(state,action)=>{ // Reducer function to add items to the cart
            //if item present in cart so increase the quantity
            const itemPresent=state.cart.find((item)=>item.id === action.payload.id); // Checking if the item is already present in the cart
            if(itemPresent){
                itemPresent.quantity++; // Incrementing the quantity if the item is already in the cart
            }else{
                state.cart.push({...action.payload,quantity: 1}); // Adding a new item to the cart with a quantity of 1 if it's not present
            }
        },
        removeFromCart:(state,action)=>{ // Reducer function to remove items from the cart
            const removeItem=state.cart.filter((item)=>item.id!==action.payload.id) // Filtering out the item to remove from the cart
            state.cart = removeItem; // Updating the cart by removing the specified item
        },
        incrementQuantity: (state, action) => {
            const itemPresent = state.cart.find((item) => item.id === action.payload.id);
        
            if (itemPresent) {
                itemPresent.quantity++; // Incrementing the quantity of the found item
            }
        },
        
        decrementQuantity: (state, action) => {
            const itemPresent = state.cart.find((item) => item.id === action.payload.id);
        
            if (itemPresent) {
                if (itemPresent.quantity === 1) {
                    // If quantity is 1, remove the item from the cart
                    state.cart = state.cart.filter((item) => item.id !== action.payload.id);
                } else {
                    itemPresent.quantity--; // Decrementing the quantity of the found item
                }
            }
        },
        
        cleanCart:(state)=>{ // Reducer function to clean/reset the cart
             state.cart=[]; // Resetting the cart array to an empty array
        }
    },
});

// Exporting the action creators from the slice
export const {addToCart,removeFromCart,incrementQuantity,decrementQuantity,cleanCart}=CartSlice.actions;

// Exporting the reducer function generated by createSlice
export default CartSlice.reducer;
